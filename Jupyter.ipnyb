#1st part:
import numpy as np
import matplotlib.pyplot as plt

import keras

from keras.datasets import mnist

from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPool2D, Flatten, Dropout

#2nd part:
def plot_input_img(i):
    plt.imshow(X_train[i], cmap='binary')
    plt.title(y_train[i])
    plt.axis('off')
    plt.show()

#3rd part
for i in range(10):
  plot_input_img(i)

#4th part
X_train = X_train.astype(np.float32)/255
X_test = X_test.astype(np.float32)/255

X_train = np.expand_dims(X_train, -1)
X_test = np.expand_dims(X_test, -1)

X_train.shape

#5th part
y_train = keras.utils.to_categorical(y_train)
y_test = keras.utils.to_categorical(y_test)

#6th part
model = keras.models.Sequential()

model.add(keras.layers.Conv2D(32, (3,3), input_shape=(28,28,1), activation='relu'))
model.add(keras.layers.MaxPool2D(pool_size=(2,2)))

model.add(keras.layers.Conv2D(64, (3,3), activation='relu'))
model.add(keras.layers.MaxPool2D(pool_size=(2,2)))

model.add(keras.layers.Flatten())

model.add(keras.layers.Dropout(0.25))
model.add(keras.layers.Dense(10, activation='softmax'))
model.summary()

#7th part
model.compile(optimizer='adam', loss=keras.losses.categorical_crossentropy, metrics=['accuracy'])
from keras.callbacks import EarlyStopping, ModelCheckpoint

es = EarlyStopping(monitor='val_accuracy', min_delta=0.01, patience=4, verbose=1, mode='max')

mc = ModelCheckpoint("./bestmodel.keras", monitor="val_accuracy", verbose=1, save_best_only=True, mode='max')

cb = [es, mc]

#8th part
his = model.fit(X_train,y_train,epochs = 5, validation_split=0.3,callbacks=cb)

# Manually save the model after training
model.save('./bestmodel_manual_save.keras')

#9th part
import keras.models # Add import for clarity and robustness

# Load the model within this cell to ensure model_S is defined
try:
    model_S = keras.models.load_model('./bestmodel.keras')
except Exception as e:
    print(f"Error loading model: {e}")
    # Exit the cell execution if model loading fails
    raise

score = model_S.evaluate(X_test, y_test)

print(f"The model accuracy is {score[1]}")
